var documenterSearchIndex = {"docs":
[{"location":"library/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"","category":"page"},{"location":"library/#Public","page":"Library","title":"Public","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"Modules = [BellDiagonalQudits]\nPrivate = false","category":"page"},{"location":"library/#BellDiagonalQudits.AnalysedCoordState","page":"Library","title":"BellDiagonalQudits.AnalysedCoordState","text":"Representing an entanglement analyzed Bell diagonal state.\n\ncoordState: The analyzed CoordState\nkernel: true if kernel check successful, else false. missing if entanglement check not applied.\nspinrep: true if spinrep check successful, else false. missing if entanglement check not applied.\nppt: true if ppt check successful, else false. missing if entanglement check not applied.\nrealign: true if realignment check successful, else false. missing if entanglement check not applied.\nconcurrence: true if concurrence check successful, else false. missing if entanglement check not applied.\nmub: true if mub check successful, else false. missing if entanglement check not applied.\nnumericEW: true if numericEW check successful, else false. missing if entanglement check not applied.\n\n\n\n\n\n","category":"type"},{"location":"library/#BellDiagonalQudits.AnalysisSpecification","page":"Library","title":"BellDiagonalQudits.AnalysisSpecification","text":"Specification which entanglement checks to use.\n\nkernel_check\nspinrep_check\nppt_check\nrealignment_check \nconcurrenceqpcheck\nmub_check \nnumericewcheck\nuseSymmetries\n\n\n\n\n\n","category":"type"},{"location":"library/#BellDiagonalQudits.BoundedCoordEW","page":"Library","title":"BellDiagonalQudits.BoundedCoordEW","text":"Represents an entanglement witness W with extrema to detect entangled Bell diagonal states.\n\ncoords: Coordinates in Bell basis.\nupperBound: Upper bound of tr W rho satisfied by all separable states rho. Violation detects entanglement.\nlowerBound: Lower bound of tr W rho satisfied by all separable states rho. Violation detects entanglement.\ncheckedIterations: Number of iterations used in the optimization of bounds.\n\n\n\n\n\n","category":"type"},{"location":"library/#BellDiagonalQudits.ClassConflictException","page":"Library","title":"BellDiagonalQudits.ClassConflictException","text":"Exception for conflicts in analysis results.\n\nstate: The AnalysedCoordState for which a conflict occurs.\n\n\n\n\n\n","category":"type"},{"location":"library/#BellDiagonalQudits.CoordState","page":"Library","title":"BellDiagonalQudits.CoordState","text":"Represents a Bell diagonal state in Bell basis.\n\ncoords: Coordinates in Bell basis. \neClass: Entanglement class of the represented state.\n\n\n\n\n\n","category":"type"},{"location":"library/#BellDiagonalQudits.DensityState","page":"Library","title":"BellDiagonalQudits.DensityState","text":"Represents a Bell diagonal state.\n\ncoords: Coordinates in Bell basis.\ndensityMatrix: Hermitian density matrix in computational basis.\neClass: Entanglement class of the represented state.\n\n\n\n\n\n","category":"type"},{"location":"library/#BellDiagonalQudits.StandardBasis","page":"Library","title":"BellDiagonalQudits.StandardBasis","text":"Represents a Bell basis related to Weyl operators.\n\nbasis: Array with elements containing Bell basis density matrices, Weyl- and flat indices.\n\n\n\n\n\n","category":"type"},{"location":"library/#BellDiagonalQudits.BBPSSW_routine-Tuple{Any, Any, Any, StandardBasis}","page":"Library","title":"BellDiagonalQudits.BBPSSW_routine","text":"BBPSSW_routine(ρ, n, d, stdbasis)\n\nApplies one iteration of BBPSSW routine to the n-copy input state 'rho in d dimensions. Returns the output state and the probabilies of success with respect to the stdbasis.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.DEJMPS_routine-Tuple{Any, Any, Any, StandardBasis}","page":"Library","title":"BellDiagonalQudits.DEJMPS_routine","text":"DEJMPS_routine(ρ, n, d, stdbasis)\n\nApplies one iteration of DEJMPS routine to the n-copy input state 'rho in d dimensions. Returns the output state and the probabilies of success with respect to the stdbasis.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.FIMAX_routine-Tuple{Any, Any, Any, StandardBasis}","page":"Library","title":"BellDiagonalQudits.FIMAX_routine","text":"FIMAX_routine(ρ, n, d, stdbasis)\n\nApplies one iteration of FIMAX routine to the n-copy input state 'rho in d dimensions. Returns the output state and the probabilies of success with respect to the stdbasis.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.P1_P2_routine-Tuple{Any, Any, Any, StandardBasis}","page":"Library","title":"BellDiagonalQudits.P1_P2_routine","text":"P1_P2_routine(ρ, n, d, stdbasis)\n\nApplies one iteration of P1_P2 routine to the n-copy input state 'rho in d dimensions. Returns the output state and the probabilies of success with respect to the stdbasis.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.analyse_coordstate","page":"Library","title":"BellDiagonalQudits.analyse_coordstate","text":"analyse_coordstate(\n    d,\n    coordState::CoordState,\n    anaSpec::AnalysisSpecification,\n    stdBasis::StandardBasis=missing,\n    kernelPolytope::Union{HPolytope{Float64,Array{Float64,1}},VPolytope{Float64,Array{Float64,1}},Missing}=missing,\n    bipartiteWeylBasis::Union{Vector{Array{Complex{Float64},2}},Missing}=missing,\n    dictionaries::Union{Any,Missing}=missing,\n    mubSet::Union{Vector{Vector{Vector{ComplexF64}}},Missing}=missing,\n    boundedEWs::Union{Array{BoundedCoordEW},Missing}=missing,\n    precision=10,\n    relUncertainity=0.0\n)\n\nReturn an AnalysedCoordState for a coordState in d dimensions based on the given anaSpec and corresponding analysis objects.\n\nIf an entanglement check should not be carried out or if an analysis object in not passed as variable, the corresponding property in anaSpec needs to be false.  In this case, return the corresponding property of the AnalysedCoordState as missing.\n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.classify_analyzed_states!-Tuple{Array{AnalysedCoordState}}","page":"Library","title":"BellDiagonalQudits.classify_analyzed_states!","text":"classify_analyzed_states!(anaCoordStates::Array{AnalysedCoordState})\n\nSet entanglement class for array of analysedCoordStates.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.concurrence_qp_gendiagonal_check","page":"Library","title":"BellDiagonalQudits.concurrence_qp_gendiagonal_check","text":"concurrence_qp_gendiagonal_check(coordState, d, basisStates, precision=10)\n\nReturn true if the quasi-pure concurrence (see concurrence.jl) is positive for a coordState and given basis states basisStates in the given precision.\n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.create_alt_indexbasis-Tuple{Any, Matrix{ComplexF64}, Any}","page":"Library","title":"BellDiagonalQudits.create_alt_indexbasis","text":"create_alt_indexbasis(d, l, α, precision)\n\nReturn alternative indexed Bell basis for d dimensions as StandardBasis rounded to precision digits. Elements of secondary index l are replaced by alternative Bell state defined by d-element vector of phases α.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.create_altbellstate","page":"Library","title":"BellDiagonalQudits.create_altbellstate","text":"create_altbellstate(state(d,k,l,α, returnDensity)\n\nReturn an alternative Bell state in the computational basis.  Return denisty matrix unless returnDensity=false, in which case return state vector.\n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.create_bipartite_weyloperator_basis-Tuple{Any}","page":"Library","title":"BellDiagonalQudits.create_bipartite_weyloperator_basis","text":"create_bipartite_weyloperator_basis(d)\n\nReturn vector of length d^4, containing the product basis of two Weyl operator bases as basis for the (d^2d^2) matrix space. \n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.create_densitystate-Tuple{CoordState, StandardBasis}","page":"Library","title":"BellDiagonalQudits.create_densitystate","text":"create_densitystate(coordState::CoordState, standardBasis::StandardBasis)\n\nReturn DensityStatecontaining the density matrix in computational basis based oncoordStatecoordinates in BellstandardBasis`.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.create_dictionary_from_basis-Tuple{StandardBasis}","page":"Library","title":"BellDiagonalQudits.create_dictionary_from_basis","text":"create_dictionary_from_basis(stdBasis)\n\nReturn vector containing a dictionary and it's inverse, relating the d^2 flat indices to the double indices of stdBasis.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.create_kernel_polytope-Tuple{Any, StandardBasis}","page":"Library","title":"BellDiagonalQudits.create_kernel_polytope","text":"create_kernel_polytope(d, standardBasis::StandardBasis)\n\nReturn LazySets.HPolytope representation of the kernel polytope for dimension d and Bell basis standardBasis.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.create_random_bounded_ews","page":"Library","title":"BellDiagonalQudits.create_random_bounded_ews","text":"create_random_bounded_ews(\n    d,\n    standardBasis::StandardBasis,\n    n,\n    sphericalOnly::Bool,\n    iterations::Integer,\n    method=Optim.NelderMead,\n    useConstrainedOpt=false\n)\n\nReturn array of n BoundedEW with d^2 standardBasis coordinates uniformly distributed in [-1, 1] if sphericalOnly is false or uniformly distributed on unit sphere otherwise.\n\nUse iterations runs to improve optimizatio with Optim.jl optimization method method.\n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.create_random_coordstates","page":"Library","title":"BellDiagonalQudits.create_random_coordstates","text":"create_random_coordstates(nSamples, d, object=:magicSimplex, precision=10, roundToSteps::Int=0, nTriesMax=10000000)\n\nReturn an array of nSamples d^2 dimensional CoordStates. \n\nUse the object to specify the coordinate ranges to [0,1] for 'magicSimplex' or [0, 1/d] for 'enclosurePolytope'.  If roundToSteps > 0, round the coordinates to the vertices that divide the range in roundToSteps` equally sized sections. Be aware that the resulting distribution of points is generally not uniform.\n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.create_standard_indexbasis-Tuple{Any, Any}","page":"Library","title":"BellDiagonalQudits.create_standard_indexbasis","text":"create_standard_indexbasis(d, precision)\n\nReturn indexed Bell basis for d dimensions as StandardBasis rounded to precision digits.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.create_standard_mub-Tuple{Any}","page":"Library","title":"BellDiagonalQudits.create_standard_mub","text":"create_standard_mub(d)\n\nReturn vector of mutually unbiased bases for dimensions d three or four.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.efficiency-NTuple{4, Any}","page":"Library","title":"BellDiagonalQudits.efficiency","text":"efficiency(distillable, iterations, successProbs, n)\n\nReturns efficiency of n-copy distillation protocol with iterations iterations of success probabilities successProbs.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.extend_vpolytope_by_densitystates-Tuple{LazySets.VPolytope{Float64, Vector{Float64}, VT} where VT<:AbstractVector{Vector{Float64}}, Array{DensityState}, Integer}","page":"Library","title":"BellDiagonalQudits.extend_vpolytope_by_densitystates","text":"extend_vpolytope_by_densitystates(\n    sepPolytope::VPolytope{Float64,Array{Float64,1}},\n    sepDensityStates::Array{DensityState},\n    precision::Integer\n)\n\nReturn an extended Lazysets.VPolytope representation of polytope of separable states based on given polytope sepPolytope and new separable sepDensityStates as new vertices.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.generate_symmetries","page":"Library","title":"BellDiagonalQudits.generate_symmetries","text":"generate_symmetries(stdBasis::StandardBasis, d, orderLimit=0)\n\nReturn array of Permutations.Permutation of all symmetries up to order orderLimit in d dimensions generated by the generators represented in standardBasis.\n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.get_bounded_coordew-Tuple{BellDiagonalQudits.BoundedEW}","page":"Library","title":"BellDiagonalQudits.get_bounded_coordew","text":"get_bounded_coordew(bEw::BoundedEW)::BoundedCoordEW\n\nMap BoundedEW bEw to corresponding BoundedCoordEW.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_symcoords-Tuple{Vector{Float64}, Array{Permutations.Permutation}}","page":"Library","title":"BellDiagonalQudits.get_symcoords","text":"get_symcoords(coords::Array{Float64,1}, symPermutations::Array{Permutation})\n\nReturn array containing all symmetric Bell coordinates of given symmetries symPermutations applied to Bell coordinates coords.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.iterative_BBPSSW_protocol","page":"Library","title":"BellDiagonalQudits.iterative_BBPSSW_protocol","text":"iterative_BBPSSW_protocol(ρ, targetFid, n, d, stdBasis, maxIts)\n\nApplies iterations of the BBPSSW routine to the n-copy input state ρ in d dimensions.  Iterates until targetFid or maximal number of iterations maxIts is reached.  Returns distillable=true if targetFid could be reached and fidelities and success probabilies with respect to the stdbasis for each iteration.\n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.iterative_DEJMPS_protocol","page":"Library","title":"BellDiagonalQudits.iterative_DEJMPS_protocol","text":"iterative_DEJMPS_protocol(ρ, targetFid, n, d, stdBasis, maxIts)\n\nApplies iterations of the DEJMPS routine to the n-copy input state ρ in d dimensions.  Iterates until targetFid or maximal number of iterations maxIts is reached.  Returns distillable=true if targetFid could be reached and fidelities and success probabilies with respect to the stdbasis for each iteration.\n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.iterative_FIMAX_protocol","page":"Library","title":"BellDiagonalQudits.iterative_FIMAX_protocol","text":"iterative_FIMAX_protocol(ρ, targetFid, n, d, stdBasis, maxIts)\n\nApplies iterations of the FIMAX routine to the n-copy input state ρ in d dimensions.  Iterates until targetFid or maximal number of iterations maxIts is reached.  Returns distillable=true if targetFid could be reached and fidelities and success probabilies with respect to the stdbasis for each iteration.\n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.iterative_P1_P2_protocol","page":"Library","title":"BellDiagonalQudits.iterative_P1_P2_protocol","text":"iterative_P1_P2_protocol(ρ, targetFid, n, d, stdBasis, maxIts)\n\nApplies iterations of the P1_P2 routine to the n-copy input state ρ in d dimensions.  Iterates until targetFid or maximal number of iterations maxIts is reached.  Returns distillable=true if targetFid could be reached and fidelities and success probabilies with respect to the stdbasis for each iteration.\n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.sym_analyse_coordstate","page":"Library","title":"BellDiagonalQudits.sym_analyse_coordstate","text":"sym_analyse_coordstate(\n    d,\n    coordState::CoordState,\n    symmetries::Array{Permutation},\n    anaSpec::AnalysisSpecification,\n    stdBasis::StandardBasis=missing,\n    kernelPolytope::Union{HPolytope{Float64,Array{Float64,1}},VPolytope{Float64,Array{Float64,1}},Missing}=missing,\n    bipartiteWeylBasis::Union{Vector{Array{Complex{Float64},2}},Missing}=missing,\n    dictionaries::Union{Any,Missing}=missing,\n    mubSet::Union{Vector{Vector{Vector{ComplexF64}}},Missing}=missing,\n    boundedCoordEWs::Union{Array{BoundedCoordEW},Missing}=missing,\n    precision=10,\n    relUncertainity=0.0\n)\n\nReturn an AnalysedCoordState for a coordState in d dimensions based on the given anaSpec and corresponding analysis objects and symmetry analysis.\n\nIf an entanglement check should not be carried out or if an analysis object in not passed as variable, the corresponding property in anaSpec needs to be false.  In this case, return the corresponding property of the AnalysedCoordState as missing.\n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.uniform_bell_sampler","page":"Library","title":"BellDiagonalQudits.uniform_bell_sampler","text":"uniform_bell_sampler(n, d, object=:magicSimplex, precision=10)\n\nCreate array of n uniformly distributed d^2 Bell diagonal states represented as CoordState rounded to precision digits. \n\nUse object=:enclosurePolytope to create CoordStates in the enclosure polytope, having all coords leq 1d.\n\n\n\n\n\n","category":"function"},{"location":"library/#Internal","page":"Library","title":"Internal","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"Modules = [BellDiagonalQudits]\nPublic = false","category":"page"},{"location":"library/#BellDiagonalQudits.BoundedEW","page":"Library","title":"BellDiagonalQudits.BoundedEW","text":"Represents an entanglement witness W with extrema and extremizers to detect entangled Bell diagonal states.\n\ncoords: Coordinates in Bell basis.\nupperBound: Upper bound of tr W rho satisfied by all separable states rho. Violation detects entanglement.\nlowerBound: Lower bound of tr W rho satisfied by all separable states rho. Violation detects entanglement.\nmaximizingDensityMatrix: Density matrix of separable state rho in computational basis, maximizing tr W rho.\nminimizingDensityMatrix: Density matrix of separable state rho in computational basis. minimizing tr W rho.\ncheckedIterations: Number of iterations used in the optimization of bounds.\n\n\n\n\n\n","category":"type"},{"location":"library/#BellDiagonalQudits.EntanglementWitness","page":"Library","title":"BellDiagonalQudits.EntanglementWitness","text":"Represents an operator to detect Bell diagonal entangled states.\n\ncoords: Coordinates in Bell basis\noperatorMatrix: Hermitian matrix representing the linear operator in computational basis.\n\n\n\n\n\n","category":"type"},{"location":"library/#BellDiagonalQudits.FT_OP-Tuple{Any}","page":"Library","title":"BellDiagonalQudits.FT_OP","text":"FT_OP(d)\n\nReturns the d-dimensional Fourier gate.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.GXOR_OP_ADD-Tuple{Any}","page":"Library","title":"BellDiagonalQudits.GXOR_OP_ADD","text":"GXOR_OP_ADD(d)\n\nReturns the d-dimensional generalization of the GXOR gate acting as |i>k|j> => |i>|i+j>.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.GXOR_OP_SUB-Tuple{Any}","page":"Library","title":"BellDiagonalQudits.GXOR_OP_SUB","text":"GXOR_OP_SUB(d)\n\nReturns the d-dimensional generalization of the GXOR gate acting as |i>k|j> => |i>|i-j>.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.P1_routine-Tuple{Any, Any, Any, StandardBasis}","page":"Library","title":"BellDiagonalQudits.P1_routine","text":"P1_routine(ρ, n, d, stdbasis)\n\nApplies one iteration of P1 routine to the n-copy input state 'rho in d dimensions. Returns the output state and the probabilies of success with respect to the stdbasis.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.P2_routine-Tuple{Any, Any, Any, StandardBasis}","page":"Library","title":"BellDiagonalQudits.P2_routine","text":"P2_routine(ρ, n, d, stdbasis)\n\nApplies one iteration of P2 routine to the n-copy input state 'rho in d dimensions. Returns the output state and the probabilies of success with respect to the stdbasis.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.add_errorkeys-NTuple{4, Any}","page":"Library","title":"BellDiagonalQudits.add_errorkeys","text":"add_errorkeys(x,y,d,n)\n\nAdds two error elements mod d.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.altbell_creatingoperator-Tuple{Any, Any, Any, Matrix{ComplexF64}}","page":"Library","title":"BellDiagonalQudits.altbell_creatingoperator","text":"altbell_creatingoperator(d, k, l, α)\n\nReturn the (dd)- dimensional matrix representation of an alternative operator that is used to create Bell states V_kl. V_kl  Id Ω_00 creates 1d * ω^(ks)*α_(sl) kets-l  kets\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.belldiagonal_projection","page":"Library","title":"BellDiagonalQudits.belldiagonal_projection","text":"belldiagonal_projection(stdbasis, ρ)\n\nProjects any density matrix to the set of Bell-diagonal densitystates of corresponding dimension as defined by the stdbasis.\n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.calculate_mub_correlation","page":"Library","title":"BellDiagonalQudits.calculate_mub_correlation","text":"calculate_mub_correlation(d, mubSet::Vector{Vector{Vector{ComplexF64}}}, ρ, s=-1)\n\nBased on complete set of mutually unbiased bases mubSet, return sum of mutual predictibilities, shifted by s, for density matrix ρ in d dimensions. \n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.canonic_eigenbasis_weylprime-Tuple{Any, Tuple{Int64, Int64}}","page":"Library","title":"BellDiagonalQudits.canonic_eigenbasis_weylprime","text":"canonic_eigenbasis_weylprime(d, E)\n\nCreate array of eigenvectors-eigenvalue tuples for Weyl operator indexed by tuple E in dimension d.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.classify_entanglement-Tuple{Any}","page":"Library","title":"BellDiagonalQudits.classify_entanglement","text":"classify_entanglement(analysedCoordState)\n\nReturn entanglement class of analysedCoordState. \n\nEntanglement class can be \"UNKNWON\", \"PPT_UNKNOWN\" for PPT states that can be separable or entangled, \"SEP\" for separable states, \"BOUND\" for PPT/bound entangled states or \"NPT\" for NPT/free entangled states.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.concurrence_qp_check","page":"Library","title":"BellDiagonalQudits.concurrence_qp_check","text":"concurrence_qp_check(coordState::CoordState, d, dictionaries, precision=10)\n\nReturn true if the quasi-pure concurrence (see concurrence.jl) is positive for a coordState and given basis dictionaries in the given precision.\n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.createProjectorOperator-Tuple{Any}","page":"Library","title":"BellDiagonalQudits.createProjectorOperator","text":"createProjectorOperator(d)\n\nReturn concurrence related operator in arbitrary dimension d.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.create_basis_state_operators-Tuple{Any, Any, Any}","page":"Library","title":"BellDiagonalQudits.create_basis_state_operators","text":"create_basis_state_operators(d, bellStateOperator, precision)\n\nUse maximally entangled Bell state bellStateOperator of dimension d to create Bell basis and return with corresponding flat and Weyl indices.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.create_bipartite_maxentangled-Tuple{Any}","page":"Library","title":"BellDiagonalQudits.create_bipartite_maxentangled","text":"create_bipartite_maxentangled(d)\n\nReturn maximally entangled pure state of a bipartite system of dimension d^2.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.create_canonic_enconding-Tuple{Vector{Tuple{Int64, Int64}}, Any}","page":"Library","title":"BellDiagonalQudits.create_canonic_enconding","text":"create_canonic_enconding(g, d)\n\nReturn unitary matrix as encoding for generating stabilizer element g in demensiond.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.create_comppar_unitary-Tuple{Any, Any}","page":"Library","title":"BellDiagonalQudits.create_comppar_unitary","text":"create_comppar_unitary(λ, d)\n\nReturn d dimensional prameterized unitary matrix from parameter matrix λ.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.create_dimelement_sublattices-Tuple{Any}","page":"Library","title":"BellDiagonalQudits.create_dimelement_sublattices","text":"create_dimelement_sublattices(d)\n\nReturn all sublattices with d elements represented as vector of tuples in the d^2 elements discrete phase space induced by Weyl operators.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.create_halfspheric_witnesses-Tuple{StandardBasis, Any}","page":"Library","title":"BellDiagonalQudits.create_halfspheric_witnesses","text":"create_halfspheric_witnesses(standardBasis::StandardBasis, n)\n\nReturn array of n uniformly distributed random EntanglementWitness on unit sphere represented in Bell basis standardBasis.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.create_index_sublattice_state-Tuple{StandardBasis, Any}","page":"Library","title":"BellDiagonalQudits.create_index_sublattice_state","text":"create_index_sublattice_state(standardBasis::StandardBasis, subLattice)\n\nReturn collection of standardBasis elements contributing to the state corresponding to the sublattice, coordinates in Bell basis and density matrix in computational basis.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.create_kernel_hpolytope-Tuple{Any}","page":"Library","title":"BellDiagonalQudits.create_kernel_hpolytope","text":"create_kernel_hpolytope(vertexCoordinates)\n\nReturn LazySets.HPolytope representation of polytope defined by vertexCoordinates.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.create_kernel_vertexstates-Tuple{Any, StandardBasis}","page":"Library","title":"BellDiagonalQudits.create_kernel_vertexstates","text":"create_kernel_vertexstates(d, standardBasis::StandardBasis)\n\nReturn array containing collections of corresponding standardBasis indices, coordinates and density matrices for all d element sublattices in discrete phase space.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.create_random_witnesses-Tuple{StandardBasis, Any}","page":"Library","title":"BellDiagonalQudits.create_random_witnesses","text":"create_random_witnesses(standardBasis::StandardBasis, n)\n\nReturn array of n uniformly distributed random EntanglementWitness represented in Bell basis standardBasis.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.create_red_parmatrix_from_parvector-Tuple{Any, Any}","page":"Library","title":"BellDiagonalQudits.create_red_parmatrix_from_parvector","text":"create_red_parmatrix_from_parvector(x, d)\n\nReturn parameter matrix for pure state parameterization from parameter vector x of length 2(d-1).\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.create_weyloperator_basis-Tuple{Any}","page":"Library","title":"BellDiagonalQudits.create_weyloperator_basis","text":"create_weyloperator_basis(d)\n\nReturn vector of length d^2, containing the Weyl operator basis for the (dd) dimensionalmatrix space. \n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.depolarize_coords-Tuple{Any}","page":"Library","title":"BellDiagonalQudits.depolarize_coords","text":"depolarize_coords(coords)\n\nReturn depolarized elements of a coord probability vector. Leaves the first element invariant. Remaining elements are replaced by their average value.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.direct_optimization","page":"Library","title":"BellDiagonalQudits.direct_optimization","text":"direct_optimization(f, negf, method, d, iterations, constrainedOpt=false)\n\nReturn total (minimum, minimizer) and (maximum, maximizer) of iterations optimization runs of function f and its negative negf over the set of separale states using Optim.jl optimization mehtod method.\n\nOptim.jl is used for optimazation based on parameterization.jl, so f and negf are defined for 2(d-1) parameters. Supported methods include NelderMead, LBFGS and NewtonTrustRegion.\n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.generic_vectorproduct-Tuple{Any, Any}","page":"Library","title":"BellDiagonalQudits.generic_vectorproduct","text":"generic_vectorproduct(A,B)\n\nFor any vectors of equal length, return sum_i AiBi, the sum of all products of elements with the same index.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_abelian_subgroup_generators-Tuple{Any, Any}","page":"Library","title":"BellDiagonalQudits.get_abelian_subgroup_generators","text":"get_abelian_subgroup_generators(d, n)\n\nReturn all generators of abelian subgroups for the n-copy weyl-Heisenberg group in d dimensions.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_bounded_ew","page":"Library","title":"BellDiagonalQudits.get_bounded_ew","text":"get_bounded_ew(d, wit::EntanglementWitness, iterations, method=Optim.NelderMead, useConstrainedOpt=false)\n\nReturn BoundedEW in d dimensions based on EntanglementWitness wit and iterations optimization runs of lower and upper bound for separable states.\n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.get_codespace_errorops_for_meas-Tuple{Any, Vector{Vector{Tuple{Int64, Int64}}}, Vector{Int64}, Vector{Int64}, Any, Any}","page":"Library","title":"BellDiagonalQudits.get_codespace_errorops_for_meas","text":"get_codespace_errorops_for_meas(U, gVec, aVec, bVec)\n\nFor given encoding U of a stabilizer with generating elements gVec and measurement outcomes aVec and bVec, return Dict of error elements (keys) and error action operators (values).\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_comppar_unitary_from_parvector-Tuple{Any, Any}","page":"Library","title":"BellDiagonalQudits.get_comppar_unitary_from_parvector","text":"get_comppar_unitary_from_parvector(x, d)\n\nReturn parameterized unitatry matrix U of dimension d and rank 1 from parameter vector x with 2(d-1) elements. \n\nUsing the first basis state of the computational basis with density matrix e_1, any pure state rho can be generated as rho = U e_1 U^dagger.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_concurrence_qp-Tuple{Any, Any, Any}","page":"Library","title":"BellDiagonalQudits.get_concurrence_qp","text":"get_concurrence_qp(coords, d, dictionaries)\n\nReturn quasi-pure approximation of the concurrence for a Bell diagonal state represented by coordinates coords with respect to a StandardBasis and corresponding dictionaries in d dimensions.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_concurrence_qp_gendiagonal-Tuple{Any, Any, Array{Vector{ComplexF64}}}","page":"Library","title":"BellDiagonalQudits.get_concurrence_qp_gendiagonal","text":"get_concurrence_qp_gendiagonal(coords, d, basisStates)\n\nReturn quasi-pure approximation of the concurrence for a d-dimensional Bell diagonal state represented by coordinates coords with respect to a set of basisStates. \n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_coset_partition-Tuple{Any, Any, Any}","page":"Library","title":"BellDiagonalQudits.get_coset_partition","text":"get_coset_partition(gVec, n, d)\n\nReturn coset partition of error elements defined by stabilizer generating elements gVec of n-copies in d dimensions.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_cosets_prob_s-NTuple{5, Any}","page":"Library","title":"BellDiagonalQudits.get_cosets_prob_s","text":"get_cosets_prob_s(ρ, gVec, n, d, stdbasis)\n\nReturn vector of tuples containing the cosets defined by stabilizer generating elements gVec for n-copies ind dimensions together with its s-value and probabilies in the stdbasis.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_direct_functions_for_wit_traceoptimization-Tuple{BellDiagonalQudits.EntanglementWitness, Any}","page":"Library","title":"BellDiagonalQudits.get_direct_functions_for_wit_traceoptimization","text":"get_direct_functions_for_wit_traceoptimization(wit::EntanglementWitness, d)\n\nReturn the function and its negative that calculates tr rho wit.coords, the trace of the given witness wit multiplied by a parameterized seperable state rho in d dimensions.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_erroraction_from_encoding-NTuple{5, Any}","page":"Library","title":"BellDiagonalQudits.get_erroraction_from_encoding","text":"get_erroraction_from_encoding(U, W, bVec, sVec, d )\n\nCreate error action operator for an error W in encoding U for measurment outcomes bVec and sVec in dimension d.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_erroroperator_from_errorelement-Tuple{Vector{Tuple{Int64, Int64}}, Any}","page":"Library","title":"BellDiagonalQudits.get_erroroperator_from_errorelement","text":"get_erroroperator_from_errorelement(E, d)\n\nReturn error operator in computational basis from error element E in dimension d.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_intertwiner-Tuple{Any, Any, Any}","page":"Library","title":"BellDiagonalQudits.get_intertwiner","text":"get_intertwiner(d, k, l)\n\nReturn the tensor product W_kl otimes mathbb1_d.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_max_fidelity_stabilizer_coset-NTuple{4, Any}","page":"Library","title":"BellDiagonalQudits.get_max_fidelity_stabilizer_coset","text":"get_max_fidelity_stabilizer_coset(ρ, n, d, stdbasis)\n\nReturns stabilizer generator, coset of maximal normalized probability and corresponding s-value, coset probabily and s-value probabily for n-copy input state ρ in d dimensions with respect to stdbasis.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_permutation_from_momentuminversion-Tuple{StandardBasis, Any}","page":"Library","title":"BellDiagonalQudits.get_permutation_from_momentuminversion","text":"get_permutation_from_momentuminversion(stdBasis::StandardBasis, d)\n\nReturn Permutations.Permutation of momentum inversion for d^2 dimensional vector of coordinates in Bell basis standardBasis.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_permutation_from_quarterrotation-Tuple{StandardBasis, Any}","page":"Library","title":"BellDiagonalQudits.get_permutation_from_quarterrotation","text":"get_permutation_from_quarterrotation(stdBasis::StandardBasis, d)\n\nReturn Permutations.Permutation of qurater rotation for d^2 dimensional vector of coordinates in Bell basis standardBasis.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_permutation_from_translation-Tuple{Tuple{Int64, Int64}, StandardBasis, Any}","page":"Library","title":"BellDiagonalQudits.get_permutation_from_translation","text":"get_permutation_from_translation(translation::Tuple{Int,Int}, stdBasis::StandardBasis, d)\n\nReturn Permutations.Permutation of translation for d^2 dimensional vector of coordinates in Bell basis standardBasis.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_permutation_from_verticalshear-Tuple{StandardBasis, Any}","page":"Library","title":"BellDiagonalQudits.get_permutation_from_verticalshear","text":"get_permutation_from_verticalshear(stdBasis::StandardBasis, d)\n\nReturn Permutations.Permutationof vertical shear ford^2dimensional vector of coordinates in Bell basisstandardBasis`.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_prob_for_E-Tuple{Any, Vector{Tuple{Int64, Int64}}, Any}","page":"Library","title":"BellDiagonalQudits.get_prob_for_E","text":"get_prob_for_E(ρ, E, stdBasis)\n\nReturn probability of measurment of stdBasis corresponding to error element E in state ρ.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_prob_for_errorkeys-NTuple{4, Any}","page":"Library","title":"BellDiagonalQudits.get_prob_for_errorkeys","text":"get_prob_for_errorkeys(ρ, errorKeys, n, stdBasis)\n\nGet total error probability for n-copy errorKeys defined by stdBasis in rho.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_properdivisors-Tuple{Int64}","page":"Library","title":"BellDiagonalQudits.get_properdivisors","text":"get_properdivisors(k:Int)\n\nReturn vector of proper divisors of k.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_s_dict_for_generators-Tuple{Vector{Vector{Tuple{Int64, Int64}}}, Any, Any}","page":"Library","title":"BellDiagonalQudits.get_s_dict_for_generators","text":"get_s_dict_for_generators(gVec, n, d)\n\nCreate Dict containing the s-values for each error element (keys) for stabilizer generating elements gVec for n-copies in dimension d.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_s_errorkeys-NTuple{4, Any}","page":"Library","title":"BellDiagonalQudits.get_s_errorkeys","text":"get_s_errorkeys(gVec, sVec, n, d)\n\nReturn all errors with sValue for n-cope stabilizer generators gVec in d dimenions.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_s_for_generator-Tuple{Vector{Tuple{Int64, Int64}}, Vector{Tuple{Int64, Int64}}, Any}","page":"Library","title":"BellDiagonalQudits.get_s_for_generator","text":"get_s_for_generator(g, E)\n\nReturn s-value of error element Efor stabilzer generatorgin dimensiond`.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_s_normalized_coset_probs-NTuple{5, Any}","page":"Library","title":"BellDiagonalQudits.get_s_normalized_coset_probs","text":"get_s_normalized_coset_probs(ρ, gVec, n, d, stdbasis)\n\nReturn array of tuples containing the cosets and s-values defined by generating n-copy stabilizer elements gVec  and the coset probabilitiies, normalized coset probabilites and the s-value probabilies for the stdbasis in d dimensions.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_s_prob_dict-NTuple{5, Any}","page":"Library","title":"BellDiagonalQudits.get_s_prob_dict","text":"get_s_prob_dict(ρ, gVec, n, d, stdbasis)\n\nReturn Dict of stdbasis probabilities (values) for each s-value (keys) in n-copy state rho of subsystem dimension d.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.get_stdbasis_probabilities","page":"Library","title":"BellDiagonalQudits.get_stdbasis_probabilities","text":"get_stdbasis_probabilities(ρ, stdBasis, precision)\n\nReturn probability of measuring a Bell stdBasis state for ρ in precision.\n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.get_witness_extrema","page":"Library","title":"BellDiagonalQudits.get_witness_extrema","text":"get_witness_extrema(d, wit::EntanglementWitness, iterations, method, useConstrainedOpt=false)\n\nReturn optimization (see optimization.jl) results for lower and upper bound of d dimensional EntanglementWitness wit using iterations runs and Optim.jl optimization method method.\n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.isppt-Tuple{Any, Any, Any}","page":"Library","title":"BellDiagonalQudits.isppt","text":"isPPTP(ρ, d, precision)\n\nReturn true if the partial transposition of the Hermitian matrix based on the upper triangular of ρ is positive semi-definite in precision.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.ispsd-Tuple{Any, Any}","page":"Library","title":"BellDiagonalQudits.ispsd","text":"ispsd(M, precision)\n\nReturn true if the smallest eingenvalue of matrix M rounded to precision precision is not negative.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.iterative_specific_stabilizer_protocol","page":"Library","title":"BellDiagonalQudits.iterative_specific_stabilizer_protocol","text":"iterative_specific_stabilizer_protocol(ρ, targetFid, gVec, aVec, bVec, U, n, d, stdBasis, maxIts)\n\nApplies iterations of the stabilizer routine to the n-copy input state 'rho in d dimensions for stabilizer generating elements gVec, encoding U and measurement outcomes aVec andbVec. Iterates until targetFid or maximal number of iterations maxIts is reached.  Returns distillable=true if targetFid could be reached and fidelities and success probabilies with respect to the stdbasis for each iteration.\n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.kernel_check-Tuple{CoordState, Union{LazySets.HPolytope{Float64, Vector{Float64}}, LazySets.VPolytope{Float64, Vector{Float64}, VT} where VT<:AbstractVector{Vector{Float64}}}}","page":"Library","title":"BellDiagonalQudits.kernel_check","text":"kernel_check(coordState::CoordState, kernelPolytope::Union{HPolytope{Float64,Array{Float64,1}},VPolytope{Float64,Array{Float64,1}}})\n\nReturn true if the Euclidean coordinates of the coordStateare contained in thekernelPolytope` represented in V- or H-representation.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.map_indices_to_normcoords-Tuple{Any, Any}","page":"Library","title":"BellDiagonalQudits.map_indices_to_normcoords","text":"map_indices_to_normcoords(indices, D)\n\nReturn D element normalized coordinate vector with equal nonzero values at given indices.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.modbra-Tuple{Any, Any}","page":"Library","title":"BellDiagonalQudits.modbra","text":"modbra(k,d)\n\nReturn the kth bra vector modulo d.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.modket-Tuple{Any, Any}","page":"Library","title":"BellDiagonalQudits.modket","text":"modket(k,d)\n\nReturn the kth ket vector modulo d.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.mub_check-Tuple{CoordState, Any, StandardBasis, Vector{Vector{Vector{ComplexF64}}}}","page":"Library","title":"BellDiagonalQudits.mub_check","text":"mub_check(coordState::CoordState, d, stdBasis::StandardBasis, mubSet::Vector{Vector{Vector{ComplexF64}}})\n\nReturn true if the sum of mutual predictibilities for a mubSet (see mub.jl) of dimension d exceeds 2 for a coordState and given standardBasis.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.numeric_ew_check","page":"Library","title":"BellDiagonalQudits.numeric_ew_check","text":"numeric_ew_check(coordState::CoordState, boundedEWs::Array{BoundedCoordEW}, relUncertainity::Float64)\n\nReturn true if any entanglement witness of boundedEWs detects the density matrix ρ as entangled.\n\nAn entanglement witness E of boundedEWs detects ρ, if the scalar product rho.coords cdot E.coords is not in [lowerBound, upperBound]. If a relUncertainity is given, the violation relative to upperBound-lowerBound needs to exceed relUncertainity` to detect entanglement. \n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.ppt_check","page":"Library","title":"BellDiagonalQudits.ppt_check","text":"ppt_check(coordState::CoordState, standardBasis::StandardBasis, precision=10)\n\nReturn trueif thecoordStatedefined via thestandardBasishas positive partial transposition in the givenprecision`.\n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.realignment_check","page":"Library","title":"BellDiagonalQudits.realignment_check","text":"realignment_check(coordState::CoordState, standardBasis::StandardBasis, precision=10)\n\nReturn trueif the realignedcoordStatedefined via thestandardBasishas trace norm> 1in the givenprecision`.\n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.rounddigits-Tuple{Any, Any}","page":"Library","title":"BellDiagonalQudits.rounddigits","text":"rounddigits(A, precision)\n\nReturn A with all elemets rounded up to precision digits.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.spinrep_check","page":"Library","title":"BellDiagonalQudits.spinrep_check","text":"spinrep_check(coordState::CoordState, stdBasis::StandardBasis, bipartiteWeylBasis::Vector{Array{Complex{Float64},2}}, precision=10)\n\nReturn true and detects a coordState for a standardBasis as separbale, if its coefficiencts in the bipartiteWeylBasis have 1-norm smaller than 2 in given precision.\n\n\n\n\n\n","category":"function"},{"location":"library/#BellDiagonalQudits.stabilizer_routine-Tuple{Any, Any, Any, Any, Any, Any, Any, StandardBasis}","page":"Library","title":"BellDiagonalQudits.stabilizer_routine","text":"stabilizer_routine((ρ, gVec, aVec, bVec, Uenc, n, d, stdbasis)\n\nReturn output state and probability of success for one iteration of the stabilizer distillation routine.\n\nThe routine is defined by the input state ρ, the stabilizer generating element gVec, the measurement outcomes aVec and bVec,  the encoding operator Uenc, the number of copies n, the dimension of the subsystems d and the standard Bell bases stdbasis.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.weyloperator-Tuple{Any, Any, Any}","page":"Library","title":"BellDiagonalQudits.weyloperator","text":"weyloperator(d, k, l)\n\nReturn the (dd)- dimensional matrix representation of Weyl operator W_kl.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.weyltrf-NTuple{4, Any}","page":"Library","title":"BellDiagonalQudits.weyltrf","text":"weyltrf(d, ρ, k, l)\n\nApply the (kl)-th Weyl transformation of dimension d to the density matrix ρ. Return W_kl rho W_kl^dagger.\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.δ-Tuple{Any, Any}","page":"Library","title":"BellDiagonalQudits.δ","text":"δ(n,m)\n\nReturn 1 if n==m\n\n\n\n\n\n","category":"method"},{"location":"library/#BellDiagonalQudits.δ_mod-Tuple{Any, Any, Any}","page":"Library","title":"BellDiagonalQudits.δ_mod","text":"δ_mod(n,m,x)\n\nReturn 1 if n and m are congruent modulo x.\n\n\n\n\n\n","category":"method"},{"location":"manual/#Manual","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"This manual shows how to use the package by using it to sample a set of uniformly distributed Bell diagonal states and to analyse their entanglement properties. Here, we apply criteria for separability and entanglement to determine the entanglement class of generated bipartite qutrits, i.e. d=3. In this system, bound entangled states, i.e. entangled states with positive partial transposition (PPT) that cannot be used for entanglement distillation, exist. The entanglement classes are labeled \"SEP\" for separability, \"BOUND\" for bound entanglement, \"FREE\" for entanglement with negative partial transposition (i.e. distillable) and \"PPT_UNKNOWN\" for PPT states that could not be classified as entangled or separable.","category":"page"},{"location":"manual/#Package-installation","page":"Manual","title":"Package installation","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"BellDiagonalQudits can be installed using the Julia package manager. From the Julia REPL, type ] to enter the Pkg REPL mode and run","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"pkg> add BellDiagonalQudits","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"The package can be loaded via","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"julia> using BellDiagonalQudits","category":"page"},{"location":"manual/#State-generation","page":"Manual","title":"State generation","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Create a basis of maximally entangled bipartite Bell states in d^2 dimensions. Each Bell basis state is created by applying a certain Weyl transformation to the maximally entangled state. Sample Bell diagonal random mixed states of those Bell states, represented by their d^2 coordinates (mixing probabilities) in the Bell basis.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"\nBell basis generation","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Create a Bell basis myBasis by applying each of the d^2 Weyl transformations W_{k,l} \\\\otimes \\\\mathbb{1}_d to the maximally entangled state.myBasis.basis contains the enumerated Bell states in computational basis together with the indices of the corresponding Weyl transformation. myBasisDict contains the dictionaries to relate the enumerated d^2 Bell basis states to the double indices (k,l) of the corresponding Weyl transformation.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"d = 3\nmyBasis = create_standard_indexbasis(d,10)\nmyBasisDict = create_dictionary_from_basis(myBasis)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"\nState sampling","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Create uniformly distributed random representations of quantum states by specifying the coordinates of the state in the created Bell basis. The coordinates represent the mixing probabilities of the Bell basis states. Here, we create only states with Bell coordinates within the \"enclosure polytope\", which is defined by the limitation of all coordinates (mixing probabilities) to be smaller than or equal to 1/d. This subset is known to contain all (but not only) states with positive partial transposition (PPT), which can be separable or bound entangled.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"myCoordStates = uniform_bell_sampler(100, d, :enclosurePolytope)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Create DensityStates including the density matrix of each state in the computational basis, created by mixing the Bell states of myBasis according to the coords of myCoordStates.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"myDensityStates = map(x->create_densitystate(x, myBasis), myCoordStates)","category":"page"},{"location":"manual/#Analysis-prerequisites","page":"Manual","title":"Analysis prerequisites","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Now create the analysis objects required for the entanglement classification using several criteria for entanglement or separability.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"\nSeparable kernel polytope","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"The kernel polytope is known to contain only Bell coordinates that represent separable states. It is defined as the convex hull of vertices related to special separable states called \"subgroup states\". The related kernel check tests if the Bell coordinates of a given unclassified state are contained in this convex hull and thus indicates separability.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"mySepKernel = create_kernel_polytope(d, myBasis)\n","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"If additional separable states newSepDensityStates are known, the kernel polytope can be exteded to a larger convex hull in order to improve the kernel check for separability. For a (trivial) example, consider the separable, maximally mixed state having all Bell states mixed equally with probability 1/d^2. First,specify the coordinates in the Bell basis and set the eClass of the corresponding CoordState to \"SEP\". Then, calculate the density matrix and create the DensityState. Finally, extend the kernel polytope mySepKernel by the array containing this separable state.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"maxMixedCoordState = CoordState(1/d^2*ones(d^2), \"SEP\")\nmaxMixedDensityState = create_densitystate(maxMixedCoordState, myBasis)\nnewSepDensityStates = [maxMixedDensityState]\nmyExtendedKernel = extend_vpolytope_by_densitystates(tovrep(mySepKernel), newSepDensityStates, 10)\n","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"\nWeyl operator basis","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Use the Weyl operators to construct a basis of the space of (d^2,d^2) matrices. This object is used for the spinrep check indicating separability according to the representation of the density matrix of a given state in this basis.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"myWeylOperatorBasis = create_bipartite_weyloperator_basis(d)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"\nMutually unbiased bases (MUBs)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Create the a set of mutually unbiased bases (MUBs) constructed with the Weyl operators and represented in the computational basis.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"myMub = create_standard_mub(d)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"\nSymmetries","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Generate entanglement class conserving symmetries represented as permutations of state coordinates in the Bell basis. Given a classified state, the orbit, i.e. the set of states that are generated by applying all symmetries to the classified state, is known to be of the same entanglement class. The symmetries can be used to improve the entanglement classification.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"mySyms = generate_symmetries(myBasis, d)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"\nEntanglement witnesses","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Generate n numerical entanglement witnesses by numerical optimization over the set of separable states. Here, the entanglement witnesses are represented by their coordinates in the Bell basis, an upper, and a lower bound. For all separable states, the inner product of the state and witness coordinates obeys these bounds. A violation of the inner product of an unknown state and the witness thus indicates entanglement. Use iterations runs to improve the determined upper and lower bounds. Other optimization methods than the default NelderMead can be used.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"n = 2\nmyOptimizedEWs = create_random_bounded_ews(\n    d,\n    myBasis,\n    n,\n    true,\n    20\n    )","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"myOptimizedCoodEWs = map(x->get_bounded_coordew(x), myOptimizedEWs)","category":"page"},{"location":"manual/#Entanglement-classification","page":"Manual","title":"Entanglement classification","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Analysis specification","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Specify, which entanglement checks to use. See properties of type AnalysisSpecification. In this case we check separability with the kernel and spinrep check and test for entanglement using the ppt, realignment, concurrenceqp and numericew check.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"myAnaSpec = AnalysisSpecification(\n   true,\n   true,\n   true,\n   true,\n   true,\n   false,\n   true,\n   false\n)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"\nApply analysis to all generated states","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"If useSymmetries == false in the analysis specification myAnaSpec use analyse_coordstate, else use sym_analyse_coordstate to leverage the symmetries mySyms for improved classification.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"f(x) = analyse_coordstate(\n    d,\n    x,\n    myAnaSpec,\n    myBasis,\n    mySepKernel,\n    myWeylOperatorBasis,\n    myBasisDict,\n    missing,\n    myOptimizedCoodEWs\n)\n\n    myAnalysedCoordStates = map(x->f(x), myCoordStates)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Finally use analysis results to set CoordState.eClass to assign the entanglement class to the states.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"classify_analyzed_states!(myAnalysedCoordStates)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Identify e.g. bound entangled states as","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"myBoundStates = filter(x->x.coordState.eClass == \"BOUND\", myAnalysedCoordStates)","category":"page"},{"location":"manual/#Entanglement-distillation","page":"Manual","title":"Entanglement distillation","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Create and distill a Bell-diagonal state with the FIMAX protocol. First, create a test state.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"d=3\ntestBDS = create_densitystate(CoordState([0.5, 0.5 / 8, 0.5 / 8, 0.5 / 8, 0.5 / 8, 0.5 / 8, 0.5 / 8, 0.5 / 8, 0.5 / 8], \"UNKNOWN\"), myBasis).densityMatrix\n","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"To execute one iteration of the FIMAX routine, run:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"FIMAX_routine_results = FIMAX_routine(testBDS, 2, d, myBasis)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"To iterate this procedure until a target fidelity of 0.99 with the maximally entangled state is achieved, execute:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"FIMAX_protocol_results = iterative_FIMAX_protocol(testBDS, 0.99, 2, d, myBasis, 100)","category":"page"},{"location":"#BellDiagonalQudits.jl","page":"Home","title":"BellDiagonalQudits.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Generate and analyze Bell diagonal Qudits with Julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"A package for generation and entanglement classification of Bell diagonal quantum states.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Bell diagonal states are generated as mixtures maximally entangled Bell states, which are related by Weyl transformations. The special propterties of these states, e.g. symmetries, allow efficient methods to be leveraged for the detection of entanglement, including its generally hard to detect form of PPT/bound entanglement.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides methods to sample states, to numerically generate entanglement witnesses and to apply and extend further criteria to detect entanglement or separability in general dimension. Furthermore, it provides methods for entanglement distillation. For a precise description of implemented methods and related research results see [1] and [2] and the references therein.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Create mixtures of maximally entangled Bell states based on Weyl transformations in any dimension\nClassify Bell diagonal states as separable, PPT/bound entangled or NPT/free entangled\nGenerate numerical entanglement witnesses for Bell diagonal states\nGenerate entanglement conserving symmetries and use them for entanglement classification\nExecute recurrence-based entanglement distillation protocols.","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"[1] Popp, C., Hiesmayr, B.C., Almost complete solution for the NP-hard separability problem of Bell diagonal qutrits, Sci Rep 12, 12472 (2022), https://doi.org/10.1038/s41598-022-16225-z","category":"page"},{"location":"","page":"Home","title":"Home","text":"[2] Baumgartner, B., Hiesmayr, B.C., Narrenhofer, H. A special simplex in the state space for entangled qudits, J. Phys. A Math. Theor. 40, 7919 (2007), https://doi.org/10.1088/1751-8113/40/28/s03","category":"page"},{"location":"","page":"Home","title":"Home","text":"[3] Popp, C., Hiesmayr, B.C., Bound Entanglement of Bell Diagonal Pairs of Qutrits and Ququarts: A Comparison, arXiv (2022), https://arxiv.org/abs/2209.15267","category":"page"},{"location":"","page":"Home","title":"Home","text":"[4] Popp, C., Sutter, T.C., Hiesmayr, B.C., A Novel Stabilizer-based Entanglement Distillation Protocol for Qudits, arXiv (2024), https://arxiv.org/abs/2408.02383","category":"page"}]
}
